var express = require('express');
var router = express.Router();
var passport = require('passport');
var dotenv = require('dotenv');
var util = require('util');
var url = require('url');
var querystring = require('querystring');
var dns = require('dns');
var request = require('request');

const AUTH0_MANAGEMENT_API_TOKEN = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlF6bEVSREZFUTBFeFJFTTVNVUl4UmpkRlJqTTNNRGRETWpKR05VRXpNREUwTlRFMk9VWTFOUSJ9.eyJpc3MiOiJodHRwczovL2lkNG1lLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJ4dWJCZVpqbWJJcEZPQjYzSHdtWTk1dDNUV0c1ZGxINUBjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9pZDRtZS5ldS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU2ODYxNzc0NywiZXhwIjoxNTY4NzA0MTQ3LCJhenAiOiJ4dWJCZVpqbWJJcEZPQjYzSHdtWTk1dDNUV0c1ZGxINSIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6dXNlcnMgdXBkYXRlOnVzZXJzIGRlbGV0ZTp1c2VycyBjcmVhdGU6dXNlcnMgcmVhZDp1c2Vyc19hcHBfbWV0YWRhdGEgdXBkYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSBkZWxldGU6dXNlcnNfYXBwX21ldGFkYXRhIGNyZWF0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOnNoaWVsZHMgY3JlYXRlOnNoaWVsZHMgZGVsZXRlOnNoaWVsZHMgcmVhZDphbm9tYWx5X2Jsb2NrcyBkZWxldGU6YW5vbWFseV9ibG9ja3MgdXBkYXRlOnRyaWdnZXJzIHJlYWQ6dHJpZ2dlcnMgcmVhZDpncmFudHMgZGVsZXRlOmdyYW50cyByZWFkOmd1YXJkaWFuX2ZhY3RvcnMgdXBkYXRlOmd1YXJkaWFuX2ZhY3RvcnMgcmVhZDpndWFyZGlhbl9lbnJvbGxtZW50cyBkZWxldGU6Z3VhcmRpYW5fZW5yb2xsbWVudHMgY3JlYXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRfdGlja2V0cyByZWFkOnVzZXJfaWRwX3Rva2VucyBjcmVhdGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiBkZWxldGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiByZWFkOmN1c3RvbV9kb21haW5zIGRlbGV0ZTpjdXN0b21fZG9tYWlucyBjcmVhdGU6Y3VzdG9tX2RvbWFpbnMgcmVhZDplbWFpbF90ZW1wbGF0ZXMgY3JlYXRlOmVtYWlsX3RlbXBsYXRlcyB1cGRhdGU6ZW1haWxfdGVtcGxhdGVzIHJlYWQ6bWZhX3BvbGljaWVzIHVwZGF0ZTptZmFfcG9saWNpZXMgcmVhZDpyb2xlcyBjcmVhdGU6cm9sZXMgZGVsZXRlOnJvbGVzIHVwZGF0ZTpyb2xlcyByZWFkOnByb21wdHMgdXBkYXRlOnByb21wdHMgcmVhZDpicmFuZGluZyB1cGRhdGU6YnJhbmRpbmciLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.dLRBMvF0bvV_F5xEh__c8i2wx4au4mbPyMfI82wwTubzY9vSKHFrK2xiG2fMgHR7HJv-otyKKkMf9JisED8CxNaBeAjSqzoXWvM9kbBIdxT0V54Jc5lCpN7zayizRf2M1vENm3GUq2k5Z77JmApWJApXt3OcqrP06ZRyoRhrrC-qeSzh2_ajvhYBN60NmAymlYOtYSqQqoeCtHbDJHjRtZ6Y1RimkabysdeNArdbVQ02v2V2iERUIMGWoyXUoQd_Tv7gn7hJYzMuUjfo6Ef4HfxcsNQa8CcYf4EHSWHG9EgoSI6wm3ZNQ7hbpnOv2EmWZVKB-sxb0tRU6rmV4IQdWg';

dotenv.config();

var options = {
  connection: 'id-test-denic-de',
  scope: 'openid email profile anotherscope1',
  login_hint: 'mathias.conradt.net'
};

// Perform the login, after login Auth0 will redirect to callback
// https://github.com/auth0/passport-auth0#force-a-specific-idp
router.get('/login', passport.authenticate('auth0', options), function (req, res) {
  console.log('/login');
  res.redirect('/');
});

// https://id4me.eu.auth0.com/authorize?connection=id-test-denic-de&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fcallback&scope=openid%20email%20profile%20anotherscope1&state=Yusn03QZBB0hezgSC6GwY35F&client_id=nqP2qw3pAkKZUqpqdZKs7CrA6524NNxR



// Perform the final stage of authentication and redirect to previously requested URL or '/user'
router.get('/callback', function (req, res, next) {

  console.log('/callback');
  passport.authenticate('auth0', function (err, user, info) {
    if (err) { return next(err); }
    if (!user) { return res.redirect('/login'); }
    req.logIn(user, function (err) {
      if (err) { return next(err); }
      const returnTo = req.session.returnTo;
      delete req.session.returnTo;
      res.redirect(returnTo || '/user');
    });
  })(req, res, next);

});

// Perform session logout and redirect to homepage
router.get('/logout', (req, res) => {
  console.log('/logout');
  req.logout();

  var returnTo = req.protocol + '://' + req.hostname;
  var port = req.connection.localPort;
  if (port !== undefined && port !== 80 && port !== 443) {
    returnTo += ':' + port;
  }
  var logoutURL = new url.URL(
    util.format('https://%s/logout', process.env.AUTH0_DOMAIN)
  );
  var searchString = querystring.stringify({
    client_id: process.env.AUTH0_CLIENT_ID,
    returnTo: returnTo
  });
  logoutURL.search = searchString;

  res.redirect(logoutURL);
});


// Perform the login, after login Auth0 will redirect to callback
router.get('/prelogin', (req, res) => {
  console.log( JSON.stringify(req.query.userid) );

  String.prototype.replaceAll = function(search, replacement) {
      var target = this;
      return target.replace(new RegExp(search, 'g'), replacement);
  };

  dns.resolveTxt('_openid.' + req.query.userid, function (err, addresses) {
    if (err) throw err;

    console.log('addresses: ' + JSON.stringify(addresses));

    addresses.forEach(function (a) {
      a.forEach(function (b) {
        console.log(b); // v=OID1;iss=id.test.denic.de;clp=identityagent.de

        var iss = b.split(";")[1].split("=")[1];
        var connectionName = iss.replaceAll("\\.", "-");

        console.log('connectionName: ' + connectionName);
        // connectionName = "ID4me";

        request('https://id4me.eu.auth0.com/api/v2/connections?name=' + connectionName,
        {
          headers: {
            'Authorization': 'Bearer ' + AUTH0_MANAGEMENT_API_TOKEN
          }
        }, function (error, response, body) {

          //console.log('body: ' + JSON.parse(body).length);
          //console.log('error: ' + error);
          //console.log('response.statusCode: ' + response.statusCode);

          // if connection doesn't exist, create
          if (response.statusCode == 400 || JSON.parse(body).length===0) {

            var newConn =
              {
                "options": {
                  "scripts": {
                    "fetchUserProfile": "async function(accessToken, ctx, cb) {\n\n  console.log('test');\n\n  const jwt = require('jsonwebtoken');\n  const axios = require(\"axios\");\n\n  console.log('ID4me accessToken: ' + accessToken);\n\n  var idTokenPayload;\n  var profile = {};\n  try {\n    const r = await axios.get('https://id.test.denic.de/userinfo', {\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    });\n    console.log('r.data: ' + JSON.stringify(r.data));\n\n    var b = r.data;\n    // ====\n\n    var claim_sources = b._claim_sources;\n    var claim_names = b._claim_names;\n    var access_token, endpoint, scope, profile, userinfo;\n\n    //console.log('b.parsed: ' + JSON.parse(b));\n\n    for (var cs in claim_sources) {\n\n      console.log('CP 2: ' + cs);\n\n      if (claim_sources.hasOwnProperty(cs)) {\n        access_token = claim_sources[cs].access_token;\n        endpoint = claim_sources[cs].endpoint;\n\n        console.log('access_token ' + access_token);\n        console.log('endpoint ' + endpoint);\n\n        scope = '';\n        for (var cn in claim_names) {\n          if (claim_names.hasOwnProperty(cn)) {\n            if (claim_names[cn] === cs) {\n              scope += ' ' + cn;\n            }\n          }\n        } // for claim_names\n        console.log(scope);\n\n        //getData(endpoint);\n        const response = await axios.get(endpoint, {\n          headers: {\n            'Authorization': 'Bearer ' + access_token\n          }\n        });\n        idTokenPayload = jwt.decode(response.data);\n\n        console.log('idTokenPayload: ' + JSON.stringify(idTokenPayload));\n\n        for (cn in claim_names) {\n          if (claim_names.hasOwnProperty(cn)) {\n            if (claim_names[cn] === cs) {\n              console.log('pushing ' + cn);\n              profile[cn] = idTokenPayload[cn];\n            }\n          }\n        } // for claim_names\n\n        profile.user_id = idTokenPayload.sub;\n        profile.preferred_username = idTokenPayload['id4me.identifier'];\n\n      }\n\n    } // for claim_sources\n\n    // profile = idTokenPayload;\n    // profile.user_id = profile.sub;\n\n    console.log('profile: ' + JSON.stringify(profile));\n\n    // ====\n    cb(null, profile);\n\n  } catch (e) {\n    console.log('Error getData: ' + e);\n    cb(null, profile);\n  }\n\n}"
                  },
                  "client_id": "7pnafnqibe4jc",
                  "client_secret": "XsQa46Qp80iB1CfVqA43A2p3Woib98TNO8pnTBV5_uE",
                  "authorizationURL": "https://id.test.denic.de/login",
                  "tokenURL": "https://id.test.denic.de/token",
                  "scope": "openid profile email address phone",
                  "customHeaders": {
                    "Authorization": "Basic N3BuYWZucWliZTRqYzpYc1FhNDZRcDgwaUIxQ2ZWcUE0M0EycDNXb2liOThUTk84cG5UQlY1X3VF"
                  },
                  "upstream_params": {
              			"login_hint": {
              				"alias": "login_hint"
              			}
              		}
                },
                "strategy": "oauth2",
                "name": connectionName,
                "is_domain_connection": false,
                // "realms": [connectionName],
                "enabled_clients": ["nqP2qw3pAkKZUqpqdZKs7CrA6524NNxR"]
              };

            request({
              url: 'https://id4me.eu.auth0.com/api/v2/connections',
              uri: 'https://id4me.eu.auth0.com/api/v2/connections',
              method: 'POST',
              headers: {
                'Authorization': 'Bearer ' + AUTH0_MANAGEMENT_API_TOKEN
              },
              json: newConn
            }, function (error, response, body) {
              console.log('body: ' + JSON.stringify(body));
              console.log('error: ' + error);
              console.log('response.statusCode: ' + response.statusCode);

              if (response.statusCode == 201) {
                res.redirect('/login?connection=' + connectionName);
              } else {
                res.redirect('/');
              }

            });

          } else if (response.statusCode === 200 && JSON.parse(body).length === 1) { // connection already exists
            console.log('connection already exists');
            res.redirect('/login?connection=' + connectionName);
          }
        });

      });
    });
  });

  /*
  const r = await axios.get('https://id.test.denic.de/userinfo', {
    headers: {
      'Authorization': 'Bearer ' + accessToken
    }
  });
  console.log('r.data: ' + JSON.stringify(r.data));

  // GET https://id4me.eu.auth0.com/api/v2/connections?name=ID4me
  var conn =
  [
    {
      "id": "con_OxHeljaFKXHk9aYg",
      "options": {
        "scripts": {
          "fetchUserProfile": "async function(accessToken, ctx, cb) {\n\n  console.log('test');\n\n  const jwt = require('jsonwebtoken');\n  const axios = require(\"axios\");\n\n  console.log('ID4me accessToken: ' + accessToken);\n\n  var idTokenPayload;\n  var profile = {};\n  try {\n    const r = await axios.get('https://id.test.denic.de/userinfo', {\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    });\n    console.log('r.data: ' + JSON.stringify(r.data));\n\n    var b = r.data;\n    // ====\n\n    var claim_sources = b._claim_sources;\n    var claim_names = b._claim_names;\n    var access_token, endpoint, scope, profile, userinfo;\n\n    //console.log('b.parsed: ' + JSON.parse(b));\n\n    for (var cs in claim_sources) {\n\n      console.log('CP 2: ' + cs);\n\n      if (claim_sources.hasOwnProperty(cs)) {\n        access_token = claim_sources[cs].access_token;\n        endpoint = claim_sources[cs].endpoint;\n\n        console.log('access_token ' + access_token);\n        console.log('endpoint ' + endpoint);\n\n        scope = '';\n        for (var cn in claim_names) {\n          if (claim_names.hasOwnProperty(cn)) {\n            if (claim_names[cn] === cs) {\n              scope += ' ' + cn;\n            }\n          }\n        } // for claim_names\n        console.log(scope);\n\n        //getData(endpoint);\n        const response = await axios.get(endpoint, {\n          headers: {\n            'Authorization': 'Bearer ' + access_token\n          }\n        });\n        idTokenPayload = jwt.decode(response.data);\n\n        console.log('idTokenPayload: ' + JSON.stringify(idTokenPayload));\n\n        for (cn in claim_names) {\n          if (claim_names.hasOwnProperty(cn)) {\n            if (claim_names[cn] === cs) {\n              console.log('pushing ' + cn);\n              profile[cn] = idTokenPayload[cn];\n            }\n          }\n        } // for claim_names\n\n        profile.user_id = idTokenPayload.sub;\n        profile.preferred_username = idTokenPayload['id4me.identifier'];\n\n      }\n\n    } // for claim_sources\n\n    // profile = idTokenPayload;\n    // profile.user_id = profile.sub;\n\n    console.log('profile: ' + JSON.stringify(profile));\n\n    // ====\n    cb(null, profile);\n\n  } catch (e) {\n    console.log('Error getData: ' + e);\n    cb(null, profile);\n  }\n\n}"
        },
        "client_id": "7pnafnqibe4jc",
        "client_secret": "XsQa46Qp80iB1CfVqA43A2p3Woib98TNO8pnTBV5_uE",
        "authorizationURL": "https://id.test.denic.de/login",
        "tokenURL": "https://id.test.denic.de/token",
        "scope": "openid profile email address phone",
        "customHeaders": {
          "Authorization": "Basic N3BuYWZucWliZTRqYzpYc1FhNDZRcDgwaUIxQ2ZWcUE0M0EycDNXb2liOThUTk84cG5UQlY1X3VF"
        }
      },
      "strategy": "oauth2",
      "name": "ID4me",
      "is_domain_connection": false,
      "realms": [
        "ID4me"
      ],
      "enabled_clients": ["nqP2qw3pAkKZUqpqdZKs7CrA6524NNxR"]
    }
  ];
  */

  /*
  POST https://id4me.eu.auth0.com/api/v2/connections

  {
    "name": "",
    "strategy": "",
    "options": {
      "validation": "object",
      "enabledDatabaseCustomization": false,
      "import_mode": false,
      "customScripts": "object",
      "passwordPolicy": "",
      "password_complexity_options": "object",
      "password_history": "object",
      "password_no_personal_info": "object",
      "password_dictionary": "object",
      "api_enable_users": false,
      "basic_profile": false,
      "ext_admin": false,
      "ext_is_suspended": false,
      "ext_agreed_terms": false,
      "ext_groups": false,
      "ext_assigned_plans": false,
      "ext_profile": false,
      "upstream_params": "object",
      "set_user_root_attributes": "on_each_login",
      "gateway_authentication": "object"
    },
    "enabled_clients": [
      ""
    ],
    "realms": [
      ""
    ],
    "metadata": {}
  }
  */

  // res.redirect('/login?connection=' + req.query.userid);
});


router.get('/dns', (req, res) => {

  dns.resolveTxt('_openid.mathias.conradt.net', function (err, addresses) {
    if (err) throw err;

    console.log('addresses: ' + JSON.stringify(addresses));

    addresses.forEach(function (a) {
      a.forEach(function (b) {
        console.log(b); // v=OID1;iss=id.test.denic.de;clp=identityagent.de
      });
    });
  });

  console.log('index');
  res.end();
});

module.exports = router;
